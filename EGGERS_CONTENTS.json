{"home":{"content":"# Lecture 0: Intros and Git\n---\n\nWelcome to Lecture 0 @GA. Here's a brief class breakdown.\n\n### [[POST-CLASS] Homework Assignment](https://fewdmaterials.github.io/FEWD629_Lecture0_hwk/)\n\n### Learning Objectives\n---\n\n1. Understand how HTTP, or the HyperText Transfer Protocol, works.\n2. Learn the significance of Git and why GitHub is relevant to our interests\n3. Learn the basic structure of a simple HTML page.\n\n\n### Rundown\n---\n\n#### [Setting up your Environment](#setting-up-your-environment)\n\n#### [Guts of an HTTP Request](#guts-of-an-http-request)\n\n#### [Deploying to the internets](#deploying-to-the-internets)\n\n#### [Basic HTML structure](#basic-html-structure)\n\n","idx":0},"title":{"content":"Lecture 0: Intros and Git","idx":1},"desc":{"content":"A gentle introduction to HTTP, Git, GitHub, and HTML","idx":2},"setting-up-your-environment":{"content":"# Setting up your Environment\n---\n\nWe will first set up the tools and resources we need to succeed in class. Then, we will set up tools and resources needed to write code.\n\n### Setting up your classroom environment\n---\n\n**FIRST**, please take a moment to fill in your **[student survey](https://mobilega.typeform.com/to/DbXlOu?course_name=front-end-web-development&campus=new-york-city&start_date=6-29-2016&github=yes&location=us&core_id=20908)**.\n\n**SECOND**, have you set up your **[Slack](https://fewd629.slack.com/messages)** profile yet? If not, please do so now. (We sent you an invite, if you did not receive it, please flag down Taq or Zack now).\n\n**THIRD**, please set up a **[GitHub](https://www.github.com)** account. **Make sure you also verify your email** after setting up your account.\n\n**FINALLY**, I have developed a suite of tools that we will use in class to make our lives easier.\n\n#### Check-in Bot\nThis is a slack bot I have developed that will use your lat/long on earth (+ current time of day) to determine whether or not you are in class. **Please check in to class first thing every day when you get in.** \n\n#### Homework Bot\nThis is a slack bot that I have developed that will facilitate the submission of homework assignments. Follow the homework instructions in our class source of truth for doing the homework and then **DM** *myclassbot* on slack your homework url.\n\n#### Office Hours Bot\n**Not yet built!** But should be done by next week. Simply /officehours to generate a google calendar invite that will go out to the instructional team.\n\n\n##### [Autosync](http://autosync.io/#/course/Taq/0)\nLive class notes. For the duration of the class, all code written on my machine will be available to you in _real time_ via [Autosync](http://autosync.io/#/course/Taq/0).\n\n##### [GitBot](http://gitbot.co/#home)\nWe will use [GitBot](http://gitbot.co/#home) to deploy our webpages to the internets. You will need this in class, for homework, and generally in life.\n\n##### [Samantha](http://fewd.us/samantha/)\nSamantha is an online coding environment. We will learn javascript in [Samantha](http://fewd.us/samantha/) + it is super useful for doing quick experiments / during office hours. \n\n...There are more, but for now, these should suffice. Check out some of my writings on tools and such on my [Medium page](https://medium.com/@the_taqquikarim/).\n\n### Setting up your code environment\n---\n\nBefore we can begin our exercises in wizardry, we must download and install a few relevant programs.\n\nThese programs are going to help us write code, transfer code to servers, and view the results of our code in the browser.\n\n#### Sublime Text\n\n[Sublime Text](http://www.sublimetext.com/3) &mdash; code editor &mdash; you'll be writing code here. This is a free tool, but they will ask you to donate every few saves. However, you can use the program for free as long as you'd like.\n\n#### Chrome\n[Chrome](https://www.google.com/chrome/browser/desktop/index.html) &mdash; web browser &mdash; you'll use this to view your code assignments. So free it hurts.","idx":3},"guts-of-an-http-request":{"content":"# Guts of an HTTP Request\n---\n\n**QUESTION**: what happens when you type in [http://www.google.com](http://www.google.com) into your URL bar?\n\n#### As it turns out, a whole lot.\n\n1. Chrome has no idea what [http://www.google.com](http://www.google.com) actually means, so first, it looks up the **IP Address** for Google.\n2. **DNS**, or **Domain Name System**, is a phone book containing IP Addresses for all the websites that exist on the internet.\n3. Chrome then sends an **HTTP Request** to the IP address associated with Google. An HTTP Request is essentially a text message asking Google for data.\n4. Google's **server** will issues a server **Response** back to your browser. This response is parsed by Chrome (ie: should Chrome display this response data? download it? etc)\n5. **???**\n6. Profit.\n\n#### Ok great, why do we care?\n\nThere are a few key insights to take away here.\n\nFirst and foremost, the main communication mechanism for the internet &mdash; you know, that thing that rules our lives &mdash; is **text**. Literally just **letters and words and numbers and characters**.\n\nThe other main point to take away here is this: the text that is transferred is written in a highly specific manner. It follows a very strict set of rules that can be parsed and understood by the server and the browser. In other words, this text follows a **specific set of grammatical rules**.\n\nThis set of grammar is what determines a **language**. In other words, the text being passed back and forth is a specific language (**HTML**, as it turns out). The browser and server understand this language. If **we** were to learn it as well, we would be able to command the browser to do whatever we want (ie: we would be able to create webpage layouts).\n\n\n\n\n","idx":4},"deploying-to-the-internets":{"content":"# Deploying to the internets\n---\n\nSo at this point, we have a good sense of **how** an HTTP request works, but the main question that remains is this: **how do we get our webpage to the internets?!**\n\nTo answer this question, we must do two things: \n\n1. Build our own simple HTML page\n2. Push it to GitHub.\n\n## Building a basic HTML page\n---\nAt this point, we know that the server from our last section (say, **Google's** server) will return to us a response that is encoded in a specific way (a **language** if you will).\n\nBut! **Where is this data stored?**\n\nAs it turns out, it is stored in files and folders, in the same way we store data on our computers.\n\nSo in order for us to \"build\" our own HTML page, we must do two things:\n\n1. Create a folder to store our HTML data\n2. Create a file **within that folder** and write out HTML.\n\n## Pushing to GitHub\n---\n\nOk, now we have an HTML page! And get this: we can even load it in Chrome and see it rendered! How do we get this online?\n\nIn one word: **GitHub**.\n\n#### What is GitHub anyways?\n---\n\nGitHub is a service that allows developers to **push** their local **git repositories** online. As a courtesy, they also have their own server that will **host** HTML/CSS/JavaScript files that are found in the pushed repos.\n\nBut first, a few definitions:\n\n#### Git\n---\nGit is an open source software that allows developers to collaborate on large software projects. \n\nWith Git, developers can **commit** code at certain checkpoints. So for example, if you are building a website that requires:\n\n1. a form,\n2. a slideshow,\n3. and a server request, \n\nYou would implement the form then **commit** that code. Then, you would implement the slideshow and **commit**. Finally, you would implement the server requestand **commit** once more. \n\nThis is useful because if, for any reason your updates to the slideshow breaks your form code, you can easily **roll back** to your last commit (the form implementation) and that code would remain pristine and unbroken. \n\n#### Git Repository \n---\nWhen you take a piece of code and start tracking it with Git, you are turning it into a git **repository**. Your git repository will store all your commits, keep track of your code, give you commands that allow you to roll back to a previous commit, etc.\n\n#### Pushing to GitHub\n---\n\nThe final piece is this: your awesome git repo has let's say 500 commits on it. This is awesome! \n\nBut now calamity strikes! Your computer inexplicably dies the morning of your big presentation. Here's the main question: **are you screwed?**\n\nIn one word: **Yes**. \n\nIncidentally, this is **exactly** the problem GitHUb solves. As it turns out, Git allows you to **push** your git repos to other places. Either your friends computer, or your spare home computer, etc. GitHub is basically a cloud storage system that lets you store your git repos online for **free** and also share it with other developers.\n\nNow, if we revisit \n\n\n\n\n\n","idx":5},"basic-html-structure":{"content":"# Basic HTML structure\n---\n\nHTML stands for **Hyper Text Markup Language**. It is a set of annotations that help parsers (ie: search engines) **understand** the nature of the information that is present on the page.\n\nThink of it like an outline that describes the high level importance of different elements of your webpage.\n\nIn general, HTML works via this concept of what we call **tags**. Tags can be nested inside one another OR be adjacent to each other.\n\n**More during Lecture 1...** ","idx":6},"__list__":["home","title","desc","setting-up-your-environment","guts-of-an-http-request","deploying-to-the-internets","basic-html-structure"]}